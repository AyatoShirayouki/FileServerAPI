{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "81b92453",
   "metadata": {},
   "source": [
    "Author: Abdulrahman Altahhan, 2024.\n",
    "\n",
    "The notebook use a library of functionality in RL that aims for simplicity and general insight into how algorithms work, these libraries are written from scratch using standard python libraries (numpy, matplotlib etc.).\n",
    "Please note that you will need to take a permission from the author to use the code for research, commercially or otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ae6ef3",
   "metadata": {},
   "source": [
    "# Lesson 4- Dynamic Programming: Model-Based Approach\n",
    "\n",
    "**Learning outcomes**\n",
    "1. understand what we mean by the dynamics of the environment\n",
    "2. understand how the environment's dynamics are used in the Bellman equation\n",
    "3. use the dynamics to estimate the value function and the action-value function via dynamic programming \n",
    "4. understand the policy improvement theorem\n",
    "5. understand the policy-iteration and value-iteration algorithms as the backbone of many RL algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d5f1ca1",
   "metadata": {},
   "source": [
    "In the first lesson, you looked at a basic RL problem, the k-arm bandit, which involves only actions and no states (non-associative problem). In general, in RL, we are faced with different situations, and we need to take different actions in each situation in order to achieve a certain goal. This general type of environment with states and actions imposes a different flavour to the solution we can design. From now on, we will tackle associative problems. For associative problems, there are two approaches:\n",
    "\n",
    "1. Model-based approach\n",
    "2. Model-free approach\n",
    "\n",
    "In this lesson, we will take the first approach. We will learn how to use a model of the environment to solve an RL problem. The model is given in the form of the dynamics of the environment. These usually come in the form of 4 dimensions of conditional probability involving an answer to the following question: what is the probability of obtaining a certain reward r in a certain state s' given that the agent was previously in a state s and applied action a.\n",
    "\n",
    "We will assume that there is already a model for the environment and try to take advantage of this model to come up with the best policy. Nevertheless, we will see simple ways to build such models and come back to this question later when we tackle planning algorithms in RL."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ff0ad52",
   "metadata": {},
   "source": [
    "**Reading**:\n",
    "The accompanying reading of this lesson are **chapters 3 and 4** from our textbook by Sutton and Barto available online [here](http://incompleteideas.net/book/RLbook2020.pdf).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ba261a3",
   "metadata": {},
   "source": [
    "**Plan**\n",
    "As usual, in general there are two types of RL problems that we will attempt to design methods to deal with \n",
    "1. Prediction problem\n",
    "For These problems we will design Policy Evaluation Methods that attempt to find the best estimate for the value-function given a policy.\n",
    "\n",
    "\n",
    "2. Control problems \n",
    "For These problems we will design Value Iteration methods which utilise the idea of Generalised Policy Iteration. They attempt to find the best policy, via estimating an action-value function for a current policy then moving to a better and improved policy by choosing a greedy action often.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0d124eec",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nbimporter\n",
    "from Lesson3_MDPsGridWorld import * #Grid, randwalk, grid, cliffwalk, windy, cliffwalk, maze, maze8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "25bbf258",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9dc74e3",
   "metadata": {},
   "source": [
    "We start by generating conditional probabilities from random joint probabilities, then we move into generating them from a model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1df0b1e5",
   "metadata": {},
   "source": [
    "## 1D Probability\n",
    "Let us start by defining a 1D probability function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0ca14d61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.3922938  0.0207885  0.01603362 0.35837071 0.21251339] 1.0000000000000002\n"
     ]
    }
   ],
   "source": [
    "def P(nS):\n",
    "    p = np.zeros(nS)\n",
    "    for s in range(nS):\n",
    "        p[s] = rand()\n",
    "        \n",
    "    return p/p.sum()\n",
    "p = P(5)\n",
    "print(p, p.sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edcf017d",
   "metadata": {},
   "source": [
    "## 2D Probability: Joint Probability\n",
    "Let us move to defining a joint probability function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a0a2f6e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.10270318 0.04195992]\n",
      " [0.06153184 0.17777312]\n",
      " [0.08602537 0.12958554]\n",
      " [0.09340004 0.06392181]\n",
      " [0.08128907 0.16181011]] 0.9999999999999999\n"
     ]
    }
   ],
   "source": [
    "def P(nS,nA):\n",
    "    p = np.zeros((nS,nA))\n",
    "    for s in range(nS):\n",
    "        for a in range(nA):\n",
    "            p[s,a] = rand()\n",
    "            \n",
    "        \n",
    "    # /p.sum() to make sure that this is a joint probability density, i.e. p.sum()==1\n",
    "    return p/p.sum() \n",
    "p = P(5,2)\n",
    "print(p, p.sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "571717df",
   "metadata": {},
   "source": [
    "Note that p[s,a] in the above is interpreted as the probability of being in state *s* and taking action *a* at the same time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2f7f19e",
   "metadata": {},
   "source": [
    "## 2D Probability: Conditional Probability\n",
    "Let us move to defining a conditional probability function. Remember that a conditional probability must satisfy that Bayes rule.\n",
    "\n",
    "In the below pr[sn,a] is interpreted as pr[sn|a] the probability of moving to state sn given that we took action a "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "226157a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.09678666 0.2595462 ]\n",
      " [0.35421304 0.22036951]\n",
      " [0.09614007 0.23989015]\n",
      " [0.03580559 0.05081802]\n",
      " [0.41705465 0.22937612]]\n",
      "[1. 1.]\n"
     ]
    }
   ],
   "source": [
    "def P(nS,nA):\n",
    "    pr = np.zeros((nS,nA)) # joint\n",
    "    p  = np.zeros((nS,nA)) # conditional\n",
    "    \n",
    "    # first create a joint probability\n",
    "    for sn in range(nS):\n",
    "        for a in range(nA):\n",
    "            pr[sn,a] = rand()\n",
    "\n",
    "    # to make sure that this is a joint probability density\n",
    "    pr=pr/pr.sum() \n",
    "    \n",
    "    # now create a conditional probability via Bayes rule\n",
    "    for a in range(nA):\n",
    "        p[:,a] = pr[:,a]/pr[:,a].sum()\n",
    "            \n",
    "            \n",
    "    return p\n",
    "\n",
    "p = P(5,2)\n",
    "print(p)\n",
    "print(p.sum(0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd12f07d",
   "metadata": {},
   "source": [
    "## 4D Probability: Random Dynamic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fcc5adf",
   "metadata": {},
   "source": [
    "Our goal now is to be able to obtain a probability that can represent a random environment dynamics. Such a probability has the form of p[sn,rn | s,a] which represents the probability of moving to next state sn and obtaining the reward rn given that the agent was in state s and took action a.\n",
    "\n",
    "We generalise the above method of obtaining conditional probabilities from random joint probability density to 4-d. We have not dealt with 3-d cases for brevity. This time we will make it a bit more efficient by avoiding the four for loops and utilising the vectorised version of the rand() function in numpy and we convert to a conditional in-place to avoid having two probabilities p and pr."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bb0143ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[[0.26929885 0.30438198]\n",
      "   [0.02547514 0.20758572]\n",
      "   [0.26521477 0.01593715]]\n",
      "\n",
      "  [[0.13688973 0.23756712]\n",
      "   [0.25203987 0.25032872]\n",
      "   [0.17510866 0.01280092]]]\n",
      "\n",
      "\n",
      " [[[0.12436407 0.19494369]\n",
      "   [0.35512408 0.2413227 ]\n",
      "   [0.05953228 0.30388398]]\n",
      "\n",
      "  [[0.12211562 0.04634665]\n",
      "   [0.05960208 0.00148586]\n",
      "   [0.21376582 0.11416121]]]\n",
      "\n",
      "\n",
      " [[[0.17028449 0.05266434]\n",
      "   [0.17145641 0.11216295]\n",
      "   [0.01386517 0.26924033]]\n",
      "\n",
      "  [[0.17704724 0.16409623]\n",
      "   [0.13630242 0.18711405]\n",
      "   [0.2725133  0.28397642]]]]\n",
      "[[1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "def dynrand(nS, nA, nR): # states, actions, rewards dimensions \n",
    "    #first joint: p[sn,rn, s,a]\n",
    "    p  = np.random.rand(nS,nR,  nS,nA)\n",
    "    p /= p.sum()\n",
    "    \n",
    "    #convert it to conditional: p[sn,rn| s,a] \n",
    "    for s in range(nS):\n",
    "        for a in range(nA):\n",
    "            p[:,:, s,a] /= p[:,:, s,a].sum()\n",
    "        \n",
    "    return p\n",
    "\n",
    "p = dynrand(3,2,2)\n",
    "print(p)\n",
    "print(p.sum(0).sum(0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beed1b3f",
   "metadata": {},
   "source": [
    "## Inducing the dynamics by interacting with the environment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cd0fd6b",
   "metadata": {},
   "source": [
    "Now we move into obtaining the dynamics form an actual environment instead of generating the dynamics randomly as we did earlier.\n",
    "\n",
    "We will use mainly the random walk environment and the grid world environment and generate their dynamics. These are deterministic simple environments. Nevertheless, they are very useful to demonstrate the ideas of RL. \n",
    "\n",
    "Note that when we move to the real world the dynamics becomes much more complex and building or obtaining the dynamic becomes impractical form most cases. Therefore, towards that end instead of dealing directly with the environment dynamics we will see later how we can substitute this requirement by having to *interact* with the environment to gain *experience* which will help us *infer* a good *estimate* of the *expected* value function (discounted sum of rewards) which in turn will help us to *infer* a close to *optimal policy* for the task in hand. \n",
    "\n",
    "The exercise of dealing with probabilities and then using it in designing a Dynamic Programming solution is valuable since most of other solutions utilise the basic ideas (policy iteration, value iteration algorithms and policy improvements theorem) that we cover here and will mainly show us that we can devise a from of Bellman equation that is suitable for interaction instead of probabilities.\n",
    "\n",
    "Dynamic programming suffers from what Bellman described as the curse of dimensionality which basically dictates that the computational resources required to solve a problem grows exponentially with the dimensionality of the problem. So in our case the dimensionality is the number of states (as well as actions and rewards). So for example if the dynamic programming solution computational complexity is $2^{|S|}$ and the number of states $|S|=10$ then it costs $2^{10}=1024$ but when the number of states $|S|$ grows to 100 the cost become $2^{100}=1267650600228229401496703205376$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a5f18a93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1024\n",
      "1267650600228229401496703205376\n"
     ]
    }
   ],
   "source": [
    "print(2**10)\n",
    "print(2**100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e625ad3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dynamics(env=randwalk(), show=True, stoch=True, repeat=1000 ): #, maxjump=1\n",
    "    rewards = env.rewards_set()\n",
    "    nS, nA, nR = env.nS, env.nA, rewards.shape[0]\n",
    "    p  = np.zeros((nS,nR,  nS,nA))\n",
    "    \n",
    "    for i in range(repeat if not stoch else 1): # in case the env is stochastic (non-deterministic)\n",
    "        for s in range(nS):\n",
    "            for a in range(nA):\n",
    "                if not i and show: env.render() # render the first repitition only\n",
    "                env.s = s\n",
    "                sn,rn,_,_ = env.step(a)\n",
    "                rd = np.where(rewards==rn)[0][0] # get which reward index we need to update\n",
    "                #if (s!=sn) ^ (s in env.goals): p[sn,rd, s,a] +=1 # xor this would give terminal states a pr 1!\n",
    "                if (s!=sn) and not (s in env.goals): p[sn,rd, s,a] +=1\n",
    "            \n",
    "    # making sure that it is a conditional probability that satisfies Bayes rule\n",
    "    for s in range(nS):\n",
    "        for a in range(nA):\n",
    "            sm=p[:,:, s,a].sum()\n",
    "            if sm: p[:,:, s,a] /= sm\n",
    "            \n",
    "    return p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fb586cc",
   "metadata": {},
   "source": [
    "Note that states and actions can be immediately interpreted as indexes, rewards on the other hand are allowed to be real values. Therefore, we need to obtain the index of the reward value that we need to update since p[sn, rn, s,a] expects an index in rn."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91915422",
   "metadata": {},
   "source": [
    "Let us now test our dynamics extraction procedure on a deterministic random walk environment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "effed4b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWkAAAA6CAYAAAByFqijAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAIIElEQVR4nO3dX0iVaQLH8e97PJZJR92I2qwIURPSpDJnoX9uTDh1UxeD7MXaeiFNTiRNgVEEXURFFpWxFZVEXcywdbHBXgxGwWlHwXAUci0hJqsLycLMglNmHj3vXrw500xqRz35Pq/8PhAnz/uH30v06+15n/Mcy7ZtGxERMZLP7QAiIjI8lbSIiMFU0iIiBlNJi4gYTCUtImIwlbSIiMFU0iIiBlNJi4gYzB/NTpFIhI6ODgKBAJZlfe5MIiKTnm3bhEIhUlNT8fmGv1+OqqQ7OjqYP39+zMKJiIijvb2defPmDbs9qpIOBAIAPH78mBkzZsQm2QQLh8PcuHGDwsJC4uPj3Y4zJroG93k9P+gaTNHd3U1aWtqv/TqcqEp6cIgjEAiQlJQ0/nQuCIfDJCYmkpSU5Nk/VF2D+7yeH3QNpgiHwwCfHELWg0MREYOppEVEDGZ0STc3N1NWVsaiRYtISkpiypQpzJkzh8LCQqqqqnjx4oXbEcVgPT09HD58mGXLljF9+nQSEhKYN28eq1evZu/evTx8+NDtiOIxbnRSVGPSEy0SibB7926OHz+O3+9nzZo1FBYWkpiYSGdnJ/X19ezcuZP9+/fz6NEjZs6c6XZkMUwoFGLVqlW0tLSQkZFBcXExKSkptLe309raypEjR0hPTyc9Pd3tqOIBbnaSkSW9b98+jh8/zvLly7ly5cqQf5EaGxvZvXs3vb29LiQU01VVVdHS0kJpaSnV1dUfPZx5/Pgx7969cymdeI2bnWRcST948IBjx44xa9Ysampqhv0XKT8/n2AwSCQSmeCE4gW3b98GYPv27UM+PU9LS5voSJOfbcOdO9DYCK2t8PYtTJsG2dmQnw9Ll4IHPwzndicZV9KXL19mYGCArVu3fvK/DJZlERcXN0HJxEsG5/O3tbWxZMkSl9NMcuEwVFdDVRU8eOAUsd/vlLZlQX+/8/vMTPjuO9iyBTw0bc7tTjLuweHgHdDatWtdTiJeVlRUBEBpaSl79uwhGAzy8uVLl1NNQvfuOXfJ27dDW5vznm07xd3f77wOfo1qW5uzX36+c5xHuN1Jxt1JP3v2DIDU1NSPtgWDQWpra3/33rp161i1atWEZBPv2LRpE0ePHuXAgQNUVlZSWVkJQHp6OuvXr2fHjh1kZma6nNLjfvqJ8i+/5N8DA3wN/HOEXfuAf9g2dUB5Swt7vvgCamqgoGBiso6D251kXEmP9OXlwWCQQ4cO/e69hIQElbQMqaKigrKyMq5fv059fT1NTU00NDRw5swZLl68yNWrV9m4caPbMb3p3j1uFRbyv4EBfgTKgf8Cfx1m9x+ACPAfoNi2+VtvL2kbNsDPP0NOzoREHiu3O8m44Y7Zs2cD8OTJk4+2HTx4ENu2sW2bS5cuTXQ08aBAIEBRUREnT56krq6O58+fs23bNnp7eyktLaWvr8/tiN4TDkNxMW/6+5kD5AJ/Bl6PcMgbYMH7fVOAN4NDIsXFzqvB3O4k40p6xYoVANy6dcvlJDIZJScnc/r0aRYsWEBXVxd37951O5L3VFdDSwtfRSI8BaYCncBXIxzyd+BHIBFIA3LAGbNuaXHOZzC3O8m4ki4pKcHn83HhwgW6urrcjiOTkGVZJCYmuh3Dm2zbmcUBxAO1wJP3ryPN1/gTcA/oAP71x42nTv32cNFAbneScSWdlZXFrl276OzsZMOGDcN+dPfVq1cTnEy85Pz58zQ2Ng657dq1a9y/f5+UlBRyDB8PNc6dO840uw9KdXaUh/qAWX9807bhl1+guTlGAWPP7U4y7sEhwJEjRwiHw5w6dYqsrCwKCgrIzc399SOYzc3NNDU1kZSURG5urttxxUA1NTWUlZWRkZHBypUrSU1N5fXr1zQ3N1NXV4fP5+Ps2bNMnTrV7aje0tjozH2O5Z2vZTnnXbo0dueMMTc7yciSjouLo6qqis2bN3Pu3Dlqa2tpaGigr6+PGTNmsHjxYk6cOMHmzZu1bocMqbKykpUrV3Lz5k1qa2t5+vQpAHPnzqWkpITy8nLy8vJcTulBra3OB1Vi+bDP73fOazA3O8nIkh6Ul5dHteEPFcRMWVlZVFRUUFFR4XaUyeXt2xHvon8Atn7wcw2w+lPntG3o6Rl/tgngRicZXdIiYphp00Zcf2Mj8JcPfp4bzTktC/Qgd1gqaRGJXna2M3VuGIH3v0alv985rwzJuNkdImKw/PzYT5ezbee8MiSVtIhEb+lSZzW7WC05almwcCFopcJhqaRFJHqW5Sw3Gks7dnhynemJopIWkdHZsgVyc2G86yb7/c55vvkmNrkmKZW0iIxOfDx8/z1MmQK+MVaIz/fbefyavzASlbSIjF5OjrMe9NSpoy9Zv985rqbG+GVKTaCSFpGxKShw1oPOznbGlD81rjy4T3a2c5wHFvw3gUpaRMYuJ8dZd+P0acjIcN6zLGcow+93XgfLOzPT2a+xUXfQo6DBIBEZn/h42LYNvv3WWc1u8NvCe3qcTxIOflv4kiWaxTEGKmkRiQ3LcuZRG7yanRdpuENExGAqaRERg6mkRUQMppIWETGYSlpExGBRze6w3y9N2N3d/VnDfE7hcJienh5evHhBfPxI32tsLl2D+7yeH3QNphjsU/sTS79GVdKhUAiAhQsXjjOWiIh8KBQKkZycPOx2y/5UjQORSISOjg4CgQCWJqOLiIybbduEQiFSU1PxjbBQVVQlLSIi7tCDQxERg6mkRUQMppIWETGYSlpExGAqaRERg6mkRUQMppIWETHY/wEPeShzprdZdwAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7, 2, 7, 2)\n",
      "[[0. 0.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "p = dynamics(env=randwalk())\n",
    "print(p.shape)\n",
    "print(p.sum(0).sum(0))\n",
    "# print(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7422958c",
   "metadata": {},
   "source": [
    "The above shows that the probabilities of agent having been in state 0:6 (rows) and have gone left (column 0) all sum up to 1 except for the last terminal state 6 because once the agent is there it stays there and cannot move left. Also it shows equally that the probabilities of agent having been in state 0:6 and have gone right (column 1) all sum up to 1 except for the first terminal state 0 because once the agent is there it stays there and cannot move right. \n",
    "\n",
    "To further explain and dissect the generated probability dynamics we examine different states probabilities with different rewards."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c21dcd55",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_dynamcis(s):\n",
    "    print('-----------------------------Agent was in non-terminal state %d---------------------------------'%s)\n",
    "    print('Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state %d and moved left(0)]'%s)\n",
    "    print(p[:,0, s,0])\n",
    "\n",
    "    print('Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state %d and moved right(1)]'%s)\n",
    "    print(p[:,0, s,1])\n",
    "\n",
    "    print('Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state %d and moved left(0)]'%s)\n",
    "    print(p[:,1, s,0])\n",
    "\n",
    "    print('Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state %d and moved right(1)]'%s)\n",
    "    print(p[:,1, s,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c54fdc8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------Agent was in non-terminal state 2---------------------------------\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 2 and moved left(0)]\n",
      "[0. 1. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 2 and moved right(1)]\n",
      "[0. 0. 0. 1. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 2 and moved left(0)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 2 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print_dynamcis(s=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "401489ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------Agent was in non-terminal state 5---------------------------------\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 5 and moved left(0)]\n",
      "[0. 0. 0. 0. 1. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 5 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 5 and moved left(0)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 5 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 1.]\n"
     ]
    }
   ],
   "source": [
    "print_dynamcis(s=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb72e4d1",
   "metadata": {},
   "source": [
    "Note that the probability of the penultimate state is a bit different than a mid-state such as 2. The reason is that when the agent move left it will get a 0 reward while when it moves right it will get a reward of 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c9872032",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------Agent was in non-terminal state 0---------------------------------\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 0 and moved left(0)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 0 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 0 and moved left(0)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 0 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print_dynamcis(s=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cd68e839",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------Agent was in non-terminal state 6---------------------------------\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 6 and moved left(0)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 0 |give agent was in state 6 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 6 and moved left(0)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n",
      "Pr[of moving to states 0:6 and obtaining reward 1 |give agent was in state 6 and moved right(1)]\n",
      "[0. 0. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print_dynamcis(s=6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48e0f514",
   "metadata": {},
   "source": [
    "Uncomment the xor relationship and see the effect on the resultant policy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44f6069c",
   "metadata": {},
   "source": [
    "## Accommodating for jumps in the environment\n",
    "Some environments might allow the agent to jump over some obstacles or simply skip cells. For these we define a slightly altered dynamics to take the jumps into account. Below we show the definition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "41091ef0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dynamics(env=randwalk(), show=True, stoch=False, repeat=1000): # , maxjump=1\n",
    "\n",
    "    rewards = env.rewards_set()\n",
    "    nS, nA, nR = env.nS, env.nA, rewards.shape[0]\n",
    "    p  = np.zeros((nS,nR,  nS,nA))\n",
    "    randjump = env.randjump\n",
    "    env.randjump = False # so that probability of all intermed. jumps is correctly calculated\n",
    "    for i in trange(repeat if stoch else 1): # in case the env is stochastic (non-deterministic)\n",
    "        for s in range(nS):\n",
    "            for a in range(nA):\n",
    "                for jump in (range(1,env.jump+1) if randjump else [env.jump]):\n",
    "                    if not i and show: env.render() # render the first repitition only\n",
    "                    env.s = s\n",
    "                    env.jump = jump\n",
    "                    rn = env.step(a)[1]\n",
    "                    sn = env.s\n",
    "                    rd = np.where(rewards==rn)[0][0] # get reward index we need to update\n",
    "                    # this would give terminal states a pr 1!\n",
    "                    # if (s!=sn) ^ (s in env.goals): p[sn,rd, s,a] +=1 # xor \n",
    "                    if (s!=sn) and not (s in env.goals): p[sn,rd, s,a] +=1\n",
    "    env.randjump = randjump\n",
    "    # making sure that it is a conditional probability that satisfies Bayes rule\n",
    "    for s in range(nS):\n",
    "        for a in range(nA):\n",
    "            sm=p[:,:, s,a].sum()\n",
    "            if sm: p[:,:, s,a] /= sm\n",
    "            \n",
    "    return p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30a6a1e4",
   "metadata": {},
   "source": [
    "### State-Transition probability: reward marginalisation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ca847ac",
   "metadata": {},
   "source": [
    "Now that we have induced the dynamics from the *environment*, we are ready to infer the state-transition probability from the *dynamics*.  Note that many older papers of RL refer to the 3-d state-transition probability without referring to the 4-d dynamics. The state-transition probability p[sn | s,a] is a conditional probability that specifies the probability of moving to the next state sn given that the agent was in state s and applied action a regardless of the rewards. In other words, the state-transition probability does not refer to the reward altogether. Therefore, all we have to do to infer it from the dynamics is to marginalise the dynamics with respect to the reward, which is what the below code snippet is doing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "599bc7c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# state-transition probability induced from the dynamics\n",
    "def ssa(p): \n",
    "    # states dim, action dim\n",
    "    nS, nA = p.shape[0], p.shape[3]\n",
    "    tr = np.zeros((nS, nS, nA))\n",
    "    for s in range(nS):\n",
    "        for a in range(nA):\n",
    "            for sn in range(nS):\n",
    "                tr[sn, s,a] = p[sn,:,s,a].sum()\n",
    "    return tr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db076617",
   "metadata": {},
   "source": [
    "Let us now apply this function on the obtained random walk dynamics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "410426fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]\n",
      " [0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "tr = ssa(p)\n",
    "print(tr.sum(0))\n",
    "# print(tr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87ccc979",
   "metadata": {},
   "source": [
    "Again the state-transition probability satisfies similar properties of the dynamics."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e5cf7d8",
   "metadata": {},
   "source": [
    "Finally, we can apply a similar logic to obtain the reward function, see page 49 of the book."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "aa21b32d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reward function induced from the dynamics\n",
    "def rsa(p, rewards):\n",
    "    # state dim, reward dim\n",
    "    nS, nA, nR = p.shape[0], p.shape[3], p.shape[1]\n",
    "    r = np.zeros((nS,nA))\n",
    "    for s in range(nS):\n",
    "        for a in range(nA):\n",
    "             for rn_, rn in enumerate(rewards): # get the reward rn and its index rn_\n",
    "                r[s,a] += rn*p[:,rn_, s,a].sum()\n",
    "    return r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa1b321e",
   "metadata": {},
   "source": [
    "Note: that in the book authors use $r +\\gamma v(s)$ to mean the reward at time step $t+1$, in fact for consistency they should have used $r'$ instead as they do for $s'$. In our code treatment we have chosen to use $rn$ in place of $r'$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "962c1763",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]\n",
      " [0. 1.]\n",
      " [0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "rewards = randwalk().rewards_set()\n",
    "r = rsa(p, rewards)\n",
    "print(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4043aaf5",
   "metadata": {},
   "source": [
    "This shows us that the expected reward of state-aciton pair (5,right)=1 and (6,right)=1. This is because we expect the agent to obtain a reward of 1 in the future when it move right while it was in state 5 because it will end up in the right terminal state which has a reward of 1. Also we have (6,right)=1 because once the agent is at the terminal state 6 it will stay there."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dcf0ba4",
   "metadata": {},
   "source": [
    "# Dynamic Programming Methods"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62b038b1",
   "metadata": {},
   "source": [
    "Ok so we are ready now to move to Dynamic programming algorithms to solve the RL problem of finding a best estimate of a value function and or finding an optimal policy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "586865f3",
   "metadata": {},
   "source": [
    "## Policy evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4399b069",
   "metadata": {},
   "source": [
    "The first step to improving any policy is to evaluate how good or bad the policy is for the given task. This fundamental question can be addressed by tying up the task with a reward function that basically rewards the agent for achieving the task or a subtask that leads to the final goal. The agent's aim then becomes to collect as many rewards as possible (or to incur as few losses as possible), which should help the agent achieve the given task. One example is when a robot is moving in an environment, and we want it to reach a specific location, then we can reward/punish the robot for each step that is taking it close to the goal or away from it. But this awareness of the goal location is usually difficult to attain in real environments. Hence it is replaced by rewarding the agent when it reaches the goal or punishing the agent for each step taken without reaching the goal location.\n",
    "\n",
    "We can devise an evaluation strategy based on the discounted sum of rewards the agent is *expected* to collect while executing the task. The strategy depends on the dynamics of the environment. You may want to read section 4.1 and come back here to continue reading the code for the policy evaluation algorithm to get an insight into how it works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7227f313",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1) # change the seed to get a different dynamics\n",
    "\n",
    "def Policy_evaluation(env=randwalk(), π=None, p=None, show=True, v0=.01, V0=None, θ=1e-3, γ=1, \n",
    "                      isrand=False, stoch=False): \n",
    "    nS, nA, nR = env.nS, env.nA, env.nR\n",
    "    \n",
    "    # m states, k actions and d rewards returns a 4-d dynamics\n",
    "    if isrand:      p = dynrand(nS, nA, nR);          rewards = [-1,1] \n",
    "    elif p is None: \n",
    "        p = dynamics(env=env, show=show, stoch=stoch)\n",
    "        rewards = env.rewards_set() # maxjump=maxjump\n",
    "    else:                                             \n",
    "        rewards = env.rewards_set() # obtain a model of the env\n",
    "        \n",
    "    #V = np.ones(nS )*v0; V[env.goals] = 0 \n",
    "    V = np.ones(nS )*v0 if V0 is None else V0.copy()\n",
    "    V[env.goals] = 0 \n",
    "\n",
    "    #if π is None: π = np.zeros((nS, nA), dtype=np.uint32); π[:,1]=1 \n",
    "    if π is None: π = np.ones(nS, dtype=np.uint32) # if π is not passed then always move right\n",
    "    i=0\n",
    "    # policy evaluation--------------------------------------------------------------\n",
    "    while True:\n",
    "        Δ = 0\n",
    "        i+= 1\n",
    "        # show indication to keep us infromed\n",
    "        if not show: clear_output(wait=True); rng = trange(nS) \n",
    "        else: rng = range(nS)\n",
    "        for s in rng:\n",
    "            v, V[s] = V[s], 0            \n",
    "            for sn in range(nS):\n",
    "                for rn_, rn in enumerate(rewards): # get the next reward rn and its index rn_\n",
    "                        if π.ndim == 1: # deterministic policy\n",
    "                            V[s] += p[sn,rn_, s,π[s]]*(rn + γ*V[sn])\n",
    "                        else:           # probabilistic policy \n",
    "                            V[s] += sum(π[s,a]*p[sn,rn_, s,a]*(rn + γ*V[sn]) for a in range(nA))\n",
    "            Δ = max(Δ, abs(v-V[s]))\n",
    "        if Δ<θ:\n",
    "            if show: print('policy evaluation stopped @ iteration %d:'%i)\n",
    "            break\n",
    "    \n",
    "    return V"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de89ea89",
   "metadata": {},
   "source": [
    "Note that we assume that when the policy is deterministic, it takes the shape (nS,) and its entries are actions ex. π[s]=1 means take right(1) when in state s.\n",
    "\n",
    "On the other hand if the policy is probabilistic, it has a shape of (nS, nA) and its entries are probabilities of each action given a state s, i.e π[a|s] written as π[s,a] in the code."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8989c74f",
   "metadata": {},
   "source": [
    "Note that γ must be < 1 to guarantee convergence of the Bellman equation because we do not know whether the policy guarantees reaching a terminal(goal) state. This condition can be relaxed when we move to sampling instead of dynamic programming in the next consequent lessons."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71bf88bd",
   "metadata": {},
   "source": [
    "Ok, let us test our policy evaluation method on a default policy where the agent goes right always (embedded in the code)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "554b4f27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:00<00:00,  1.07it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 6:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0., 1., 1., 1., 1., 1., 0.])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Policy_evaluation()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae8c29f1",
   "metadata": {},
   "source": [
    "As we can see, the values for the default deterministic policy that always move the agent to the right produce a set of state values of 1 for the non-terminal states 1:5. This is what we expect since the accumulated return of this policy, given that γ=1, is 1 for these states since the agent is rewarded with 1 only when it reaches the far right terminal state, while when it is terminated at the far left state, it is rewarded with 0 (all other intermediate states also has a reward of 0)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3aac185b",
   "metadata": {},
   "source": [
    "To further test our policy evaluation method, we will pass a different policy to it. This time we pass a simple probabilistic policy that gives left and right actions the same probability of 0.5. In this case, since γ=1, the expected analytical values of the intermediate states are given as 1/6, 2/6, 3/6, 4/6, 5/6, which represent the probabilities of ending up in the far right state given the agent has started in them (so pr(s=1)=1/6)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6a78d74e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:01<00:00,  1.01s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 20:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.16481679, 0.33055852, 0.49722519, 0.66458556,\n",
       "       0.83229278, 0.        ])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "env = randwalk()\n",
    "π = np.ones((env.nS,env.nA))*.5 # probability of moving left and right are equal\n",
    "Policy_evaluation(env, π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "132fdb04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.16666667, 0.33333333, 0.5       , 0.66666667, 0.83333333])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([1/6, 2/6, 3/6, 4/6, 5/6])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e871807a",
   "metadata": {},
   "source": [
    "As we can see the values of this optimal policy (moving always right) progressively increase from left to right towards the goal that is most rewarding and the obtained values are exactly what we expected which is reassuring."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4796c21b",
   "metadata": {},
   "source": [
    "Let us try to evaluate a random policy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f19cd40e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 0 0 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "env = randwalk()\n",
    "π = np.random.randint(env.nA, size=env.nS, dtype=np.uint32)\n",
    "print(π)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c71b0b9d",
   "metadata": {},
   "source": [
    "Now we call our policy evaluaiton subroutine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bdc781d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:01<00:00,  1.01s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 3:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.  , 0.01, 0.01, 0.01, 1.  , 1.  , 0.  ])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Policy_evaluation(env, π)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d5b213b",
   "metadata": {},
   "source": [
    "As we can see the set of values are different than the above optimal policy and they are in harmony with the policy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bec294b",
   "metadata": {},
   "source": [
    "### Policy Evaluation for Grid world"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36ba884b",
   "metadata": {},
   "source": [
    "Let us now try this on a slightly more complex env such as a grid world"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a54887af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:21<00:00, 21.97s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 7:\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.\n",
      " 0. 0. 0. 0. 0. 0.]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "env = maze()\n",
    "π = np.ones(env.nS, dtype=np.uint32)*3 # always go up\n",
    "V = Policy_evaluation(env=env, π=π)\n",
    "print(V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7b730964",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='V', V=V)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "368d34bd",
   "metadata": {},
   "source": [
    "As we can see moving up yeild some benefits mainly in the cells that lead to the goal."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a79ff17",
   "metadata": {},
   "source": [
    "Let us now generate a random policy and evaluate it for a maze environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2ee3a392",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 3 0 0 1 0 3 1 0 2 1 2 0 2 1 2 0 3 0 2 0 1 2 2 0 3 3 1 1 3 2 0 2 1 1 1 3\n",
      " 3 1 2 1 1 0 0 1 0 0 1 3 3 2 1 0 2]\n"
     ]
    }
   ],
   "source": [
    "env = maze()\n",
    "π = np.random.randint(env.nA, size=env.nS, dtype=np.uint32)\n",
    "print(π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a2f58faf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='π', π=π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "830b5e74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:22<00:00, 22.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 4:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,\n",
       "       0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.  , 0.  , 0.01, 0.01, 0.01,\n",
       "       0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.01, 0.  ,\n",
       "       0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,\n",
       "       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.  , 0.  ])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Policy_evaluation(env, π)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e7ff08e",
   "metadata": {},
   "source": [
    "As we can see, the randomly generated policy is chaotic and carry little value for the agent. However, evaluating different policies is highly important for an agent since it can guide the improvement of its adopted policy (based on this ability). One example is to keep evaluating random policies until some computational resources are consumed and pick the best. Below we show such a strategy of searching for an optimal policy. You can apply all other search algorithms that you have come across before in conventional AI (breadth-first etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4bc4235e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:22<00:00, 22.09s/it]\n"
     ]
    }
   ],
   "source": [
    "env = maze()\n",
    "Vmax= np.zeros((env.nS))\n",
    "p = dynamics(env)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d8c38af6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for _ in trange(200):\n",
    "    π = np.random.randint(env.nA, size=env.nS, dtype=np.uint32)\n",
    "    V = Policy_evaluation(env, π, p, False)\n",
    "    if Vmax.sum() < V.sum(): \n",
    "        Vmax = V\n",
    "        πmax = π\n",
    "\n",
    "env.render(underhood='π', π=πmax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c56d3677",
   "metadata": {},
   "source": [
    "As we can see, finding the optimal policy by random search is difficult since the space of policies is huge, making exhaustive or random search infeasible (dimensionality problem). We need a way to take and maintain a step in the right direction of improving the policy. As you have already seen in another module, a greedy search can often lead to a good result. The next section shows a simple but effective strategy to gradually improve a policy by taking a greedy step towards the solution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64da4ba2",
   "metadata": {},
   "source": [
    "## Policy Iteration \n",
    "Now that we know how to evaluate a policy, it is time to improve it. Policy iteration is a basic and simple algorithm. It explicitly and iteratively tries first to reach a highly accurate estimate of the value function of the current policy, then it tries to improve the policy by maximising the probability of greedy actions as per the current value function. Evaluating the current policy fully and then improving it via policy iteration is inefficient, but it shows the fundamental ideas behind reinforcement learning. Please spend some time comprehending the code and reading the corresponding section 4.3 in the book."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "87d9afae",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1) # change the seed to get a different dynamics\n",
    "\n",
    "def Policy_iteration(env=randwalk(), v0=.01, θ=1e-4, γ=.99, isrand=False): \n",
    "    nS, nA, nR = env.nS, env.nA, env.nR\n",
    "    \n",
    "    # m states, k actions and d rewards returns a 4-d dynamics\n",
    "    if isrand: p = dynrand(nS, nA, nR); rewards = [-1,1] \n",
    "    else:      p = dynamics(env);       rewards = env.rewards_set() # obtain a model of the env\n",
    "        \n",
    "    # 1. initialise arbitrarily -------------------------------------------------\n",
    "    V  = np.ones (nS )*v0; V[env.goals] = 0 \n",
    "    π  = np.zeros(nS, dtype=np.uint32) # policy for all states\n",
    "    Qs = np.zeros(nA) # action-values for individual state\n",
    "     \n",
    "    j=0\n",
    "    while True:\n",
    "        j+=1\n",
    "        # 2. policy evaluation---------------------------------------------------\n",
    "        i=0\n",
    "        while True:\n",
    "            Δ = 0\n",
    "            i+= 1\n",
    "            for s in range(nS):\n",
    "                v, V[s] = V[s], 0\n",
    "                for sn in range(nS):\n",
    "                    for rn_, rn in enumerate(rewards): # get the reward rn and its index rn_\n",
    "                        V[s] += p[sn,rn_,  s, π[s]]*(rn + γ*V[sn])\n",
    "                Δ = max(Δ, abs(v-V[s]))\n",
    "            if Δ<θ: print('policy evaluation stopped @ iteration %d:'%i); break\n",
    "\n",
    "        # 3. policy improvement----------------------------------------------------\n",
    "        policy_stable=True\n",
    "        for s in range(nS):\n",
    "            πs = π[s]\n",
    "            for a in range(nA):\n",
    "                Qs[a]=0\n",
    "                for sn in range(nS):\n",
    "                    for rn_, rn in enumerate(rewards): # get the reward rn and its index rn_\n",
    "                        Qs[a] += p[sn,rn_,  s,a]*(rn + γ*V[sn]) \n",
    "            π[s] = Qs.argmax() # greedy step\n",
    "            if π[s]!=πs: policy_stable=False\n",
    "        if policy_stable: print('policy improvement stopped @ iteration %d:'%j); break\n",
    "    return π"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a153808",
   "metadata": {},
   "source": [
    "We try our policy_iteration() funciton for a random dynamcis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "41f3e392",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 7:\n",
      "policy evaluation stopped @ iteration 6:\n",
      "policy improvement stopped @ iteration 2:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, 0, 0, 0, 1], dtype=uint32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Policy_iteration(isrand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e80f9bd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 6:\n",
      "policy evaluation stopped @ iteration 6:\n",
      "policy improvement stopped @ iteration 2:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1, 1, 0, 0, 0, 1, 0], dtype=uint32)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Policy_iteration(isrand=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ee56795",
   "metadata": {},
   "source": [
    "We can of course try it for a proper Environments. We start by a random walk and then we move into grid world."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "59f54ef6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:01<00:00,  1.20s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy improvement stopped @ iteration 6:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "env=randwalk()\n",
    "π = Policy_iteration(env)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "858564eb",
   "metadata": {},
   "source": [
    "To visualise the policy we would need to pass the environment explicitly and then render the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "164c03cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1 1 1 1 0]\n"
     ]
    }
   ],
   "source": [
    "print(π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "07724d47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWkAAAA6CAYAAAByFqijAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAALaUlEQVR4nO3df1BU5R7H8fdZdxXBBX8VgVgRCo2aIyFqXhNRwjR/5DTOtZGyBk0yGdMZzaayGUcLLRLnWk2S5R82V52p6dcNxz/wpo1OQiOhliMWUybXQaRoDZGFfe4fD7SSLC6yu+dsfl8zZ5bd83D8Pp7dD2ef8+xZQymlEEIIYUk2swsQQgjhm4S0EEJYmIS0EEJYmIS0EEJYmIS0EEJYmIS0EEJYmIS0EEJYmIS0EEJYmN2fRh6Ph5qaGpxOJ4ZhBLsmIYT421NK4XK5iI+Px2bzfbzsV0jX1NQwdOjQgBUnhBBCO3v2LAkJCT7X+xXSTqcTgOrqagYOHBiYykLM7Xazf/9+srOzcTgcZpdzQ6QP5gv3+kH6YBX19fUkJib+ma+++BXS7UMcTqeT6OjonldnArfbTWRkJNHR0WG7U6UP5gv3+kH6YBVutxvgukPIcuJQCCEsTEJaCCEszNIhXVFRQV5eHiNGjCA6OprevXsTFxdHdnY2RUVFXLx40ewShYU1NjbyyiuvcO+999KvXz8iIiJISEjg/vvv5/nnn+eHH34wu0QRZszIJL/GpEPN4/GwZs0aCgsLsdvtTJ48mezsbCIjI6mtreXw4cOsXLmSdevW8eOPPzJ48GCzSxYW43K5mDRpEpWVlQwbNoycnBz69+/P2bNnOXnyJAUFBSQlJZGUlGR2qSIMmJlJlgzpF154gcLCQsaOHcvu3bs7fSGVlZWxZs0ampqaTKhQWF1RURGVlZXk5uZSXFx8zcmZ6upqrly5YlJ1ItyYmUmWC+mqqipee+01br31VkpKSnz+RUpPT6e0tBSPxxPiCkU4OHLkCADLly/v9Ox5YmJiqEsSVqcUHDsGZWVw8iRcvgx9+1I1eLCpmWS5kN65cyetra0sXbr0um8ZDMOgV69eIapMhJP2+fxnzpxhzJgxJlcjLM3thuJiKCqCqiowDLDbdWgbBjvdblqBpS0tDN67F5YsAR/T/oKRSZY7cdh+BJSZmWlyJSKczZ8/H4Dc3FzWrl1LaWkpv/76q8lVCcs5cQLS02H5cjhzRj+mlA7ulhZwuznS1jSzvl63S0/XvxciljuSPn/+PADx8fHXrCstLeXgwYMdHsvKymLSpEkhqU2Ej7lz57J582bWr1/Ppk2b2LRpEwBJSUk8+OCDrFixguHDh5tcpTDVl1+SP20aH7a28gjwLx/Nzrfdvg7kKEV+ZSVrx42DkhJKW1uDnkmWC+muvry8tLSUjRs3dngsIiJCQlp0avXq1eTl5bFv3z4OHz5MeXk5X3/9NW+++SY7duxgz549zJkzx+wyhRlOnOBAdjbftrbyHyAf+C8wpZOm7YnkAT5BB/U/m5pInDGD0pwcNhYXd2gf6Eyy3HBHbGwsAOfOnbtm3YYNG1BKoZTi/fffD3VpIgw5nU7mz5/Pli1bOHToEBcuXGDZsmU0NTWRm5tLc3Oz2SWKUHO7ISeHP1paiANGA7cBl3w0j227jW5r2x/4o21IZMPRo6jm5qBmkuVCeuLEiQAcOHDA5EoCp6XF7Ap67u/Sh5iYGLZt28Ydd9xBXV0dx48fN7ssvykV/vuhtVX3w1TFxVBZyXSPh/8BfYBaYLqP5hPbbkuBSCARGAV6Z1RW6u0FkeVCetGiRdhsNrZv305dXZ3Z5QTEoUMwYQJs2ADffmuBJ+kNeO89yMrSJ8DD9YN6L74IDz8MO3YY9O4daXY53WYYsHAh5OTA7t3w229mV9R9Hg9kZMDSpfD553qWW0gppZ/EgAM4CJxru/V1maZF6KA0gOPAv//aYOvWoL6oLRfSKSkprFq1itraWmbMmOHzo7u/hdEzdMoUPWPnpZdgzBi480545hnYtw/C5bM4jz8Op07BypUwbBiMGAHPPQdffWXNo7t33nmHsrKyDo/l50NJCSxZ8hFVVafo1as/n346ioqK8PnDmZ8PH3wAjz4Kt9wCU6fCli3eiQlW53DAE0/A9u0wezYMGgRz5uiD0ZqaEBRw7JieZnfVDo/tojlACrAKuAA8DnRIJKXg9GmoqAhaJlnuxCFAQUEBbrebrVu3kpKSQkZGBqNHj/7zI5gVFRWUl5cTHR3N6NGjzS73T+++6/vFEhXl/fnnn+Gtt/QSFQUPPKCfsA89BLHXe8YE2auvQkND5+vi4qD9VMH33+tl82YYOBBmztR9mD4dYmJCV+9fNTfDunXw0UclVFXlMWDAMIYM+Qf9+sXjdl/CZqsADgE2WlvfYv36PqxfDwkJMGuW7sPUqRARYV4ffvkFtm3zvT4mRu+jlhY4cEAvq1ZBSoquf/ZsmDhRT/U1y7FjsGdP5+vcbv2uQCl9JP3ZZ3oBSEvz9iE1VbcLqLIy7z/eDQWAG9iKDu0M9Ph0JHqopGLePMp/+ik4maT80NDQoABVV1fnT/OAKS8vV4sXL1bJyckqKipKORwOFRsbq7KystQbb7yhLly44Pe2mpub1ccff6yam5uDVu+0aUrpvX9ji2EoNX68UkVFSl25Yk4fEhJ61ge7Xf8/7NqllMcT+j5cutReyykFmxU8oCBRQUTbkqRgkYJyn32IjFRq7lyl9u8Pff1KKVVe3rN9AEoNGKDUwoVKffONOX3YtavnfRgyRKm8PKWqqwPYh/x8pRyOGy6qHNRiUMmgokA5QMWCyho6tNuZVFdXpwDV0NDQZTtLHkm3S0tLozjIg/JWcfvt3iOIKVOgd2+zK+q+ESO8fZgwIQhHQd2SAqxuW/w3bpy3DxZ6k+Y3ux0mT9b1z5qlh6bCTd++Hd9dxsUFcOOXL3d5FP0BsPSq+yXA/VfdTwOuSSS7Xb+FXLkyUFV23HxQtnqT+uILfWKkMy+/rIcG2hkGjB/vfTHdc4/ZoaZVVflet2ABfPKJ977DoU8CtffhrruCX9/1REb6Phnl8egPi333Xcf22dm6DzNnwm23habOrqSm+u7D779DcnLHIan24aZZs3RW9O8fmjq7smABPPJI5+tOn9bnZq7OyiFDvM+jqVN1UAdF375dvtDmAOOvuj/En20ahn4iBYmEdAD5Ovqtr4e339bjz1cHgtnjz53xNRZ7/LgO6EGDOo4/W+3b1AzDdx8+/FAH9NCh3vHnzExzx587Y7P5rqmwUAf03Xd7j/jvu8/c8efO9Oqll868/roO6LFjvX0YMyZEBykjR3Z5ptvZtnRLS4vebpBYbNf+PVVXw969ehjDaoHgr9paPZNjwgTfLz6rs9mgokIPY1jhXUt3KaWHxaqqwnMYA/RspsxMKCiATq78EHzp6YGfyqOU3m6QSEiHQFqa2RX03LRpZlfQc/PmmV1BzxgGPPaY2VX0TEQEPPmkiQWkpsLw4XoaViDC2jD09oJ4pUXLzZMWQoigMQx49tnAbnPFiqC+NZOQFkLcXJYs0WNePR23s9v1dp56KjB1+SAhLYS4uTgcsGuXPtNvu8EItNm82wnyWVsJaSHEzWfUKH2NgD59uh+ydrv+vZISvZ0gk5AWQtycMjLg6FE9fc4wrj+u3N5m5Ej9exkZISlTQloIcfMaNUpfz2PbNu+8RsPQQxl2u75tD+/hw3W7srKQHEG3kyl4Qoibm8MBy5bB00/rifTt3xbe2Kg/SThypJ4HHbJP3HQkIS2EEKADODVVLxYiwx1CCGFhEtJCCGFhEtJCCGFhEtJCCGFhEtJCCGFhfs3uUG1Xi6qvrw9qMcHkdrtpbGzk4sWLOBy+vhfY2qQP5gv3+kH6YBXteaquczU+v0La5XIBkJyc3MOyhBBCXM3lchHTxbc3G+p6MQ54PB5qampwOp0Y4Xi1dCGEsBilFC6Xi/j4eGxdXOjJr5AWQghhDjlxKIQQFiYhLYQQFiYhLYQQFiYhLYQQFiYhLYQQFiYhLYQQFiYhLYQQFvZ/pysv5uvQUkMAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='π', π=π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0baef785",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='π', π=π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3737d08d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:22<00:00, 22.08s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy evaluation stopped @ iteration 2:\n",
      "policy improvement stopped @ iteration 16:\n"
     ]
    }
   ],
   "source": [
    "env=maze()\n",
    "π = Policy_iteration(env)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5f37ad22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='π', π=π)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac88ba30",
   "metadata": {},
   "source": [
    "## Stochastic Policy Iteration\n",
    "We can also create a stochastic policy iteration method. It only differs from the deterministic policy iteration in two places (in the if ε_greedy statements): \n",
    "1. in the policy evaluation, we need to marginalize by multiplying by the action probability as we did earlier for the policy evaluation method\n",
    "2. In calculating the probability of taking an optimal action (to account for the stochastic non-determinism nature of the policy), we allow the agent to take random actions ε% of the time. \n",
    "\n",
    "We show the method below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ffdabb6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1) # change the seed to get a different dynamics\n",
    "\n",
    "def Policy_iteration_stoch(env=randwalk(), v0=.01, θ=1e-4, γ=.99, ε=.1, isrand=False): \n",
    "    nS, nA, nR = env.nS, env.nA, env.nR\n",
    "    \n",
    "    # m states, k actions and d rewards returns a 4-d dynamics\n",
    "    if isrand: p = dynrand(nS, nA, nR); rewards = [-1,3] \n",
    "    else:      p = dynamics(env);       rewards = env.rewards_set() # obtain a model of the env\n",
    "        \n",
    "    # 1. initialise arbitrarily -------------------------------------------------\n",
    "    V  = np.ones (nS )*v0; V[env.goals] = 0 \n",
    "    π  = np.ones((nS, nA)) # probabilistic policy\n",
    "    for s in range(nS): π[s] /= π[s].sum()\n",
    "    Q  = np.ones((nS, nA))  # action-values for individual state\n",
    "\n",
    "    j=0\n",
    "    while True:\n",
    "        j+=1\n",
    "        # 2. policy evaluation---------------------------------------------------\n",
    "        i=0\n",
    "        while True:\n",
    "            Δ = 0\n",
    "            i+= 1\n",
    "            for s in range(nS):\n",
    "                v, V[s] = V[s], 0\n",
    "                for sn in range(nS):\n",
    "                    for rn_, rn in enumerate(rewards): # get the reward rn and its index rn_ \n",
    "                        # probabilistic policy\n",
    "                        V[s] += sum(π[s,a]*p[sn,rn_, s,a ]*(rn + γ*V[sn]) for a in range(nA)) \n",
    "                        \n",
    "                Δ = max(Δ, abs(v-V[s]))\n",
    "            if Δ<θ: print('policy evaluation stopped @ iteration %d:'%i); break\n",
    "\n",
    "        # 3. policy improvement----------------------------------------------------\n",
    "        policy_stable=True\n",
    "        for s in range(nS):\n",
    "            if s in env.goals: π[s]=0; continue\n",
    "            Qs = Q[s]\n",
    "            for a in range(nA):\n",
    "                Q[s,a]=0\n",
    "                for sn in range(nS):\n",
    "                    for rn_, rn in enumerate(rewards): # get the reward rn and its index rn_\n",
    "                        Q[s,a] += p[sn,rn_, s,a]*(rn + γ*V[sn])\n",
    "                        \n",
    "                if abs(Q[s,a]-Qs[a]) > 1e-4: policy_stable=False\n",
    "            π[s] = Qs*0 + ε/nA\n",
    "            π[s,Q[s].argmax()] += 1-ε     # greedy step  \n",
    "        if policy_stable: print('policy improvement stopped @ iteration %d:'%j); break\n",
    "\n",
    "    return π"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "badb2038",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 2500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:01<00:00,  1.04s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "policy evaluation stopped @ iteration 27:\n",
      "policy improvement stopped @ iteration 1:\n",
      "[[0.   0.  ]\n",
      " [0.05 0.95]\n",
      " [0.05 0.95]\n",
      " [0.05 0.95]\n",
      " [0.05 0.95]\n",
      " [0.05 0.95]\n",
      " [0.   0.  ]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "env=randwalk(figsize=[25,.5])\n",
    "π = Policy_iteration_stoch(env=env)\n",
    "print(π)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e2b2acf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 2500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='Q', Q=π)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7efb676",
   "metadata": {},
   "source": [
    "As we can see the policy chooses to take right majority of the times  1-ε+ ε/nA=.95 while taking left occasionally  ε/nA."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb6bc2db",
   "metadata": {},
   "source": [
    "## Value Iteration Algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28c46f87",
   "metadata": {},
   "source": [
    "Our final step to fully develop the ideas of dynamic programming is to shorten the time it takes for a policy to be evaluated and improved. One simple idea we will follow here is to slightly improve the evaluation and immediately improve the policy. We do these two steps iteratively until our policy has stopped to improve. This is a very effective strategy because we do not wait until the policy is fully evaluated to improve it; we weave and interleave the two loops together in one loop. Below we show this algorithm. Read section 4.4 to further your understanding of this algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d32f9fa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1) # change the seed to get a different dynamics\n",
    "\n",
    "def π(Q):\n",
    "    return [Q[s].argmax() for s in range(Q.shape[0])]\n",
    "\n",
    "def value_iteration(env=randwalk(), v0=.01, θ=1e-4, γ=.99, isrand=False, show=False): \n",
    "    # initialise V randomly but make sure that terminal states = 0\n",
    "    nS, nA, nR, i = env.nS, env.nA, env.nR, 0\n",
    "    V = np.ones( nS    )*v0; V[env.goals] = 0 \n",
    "    Q = np.ones((nS,nA))*v0; Q[env.goals] = 0 \n",
    "\n",
    "    # p is a 4-d dynamics\n",
    "    if isrand: p = dynrand(nS, nA, nR); rewards = [-1,1] \n",
    "    else:      p = dynamics(env, show); rewards =  env.rewards_set()\n",
    "    \n",
    "    while True:\n",
    "        Δ = 0\n",
    "        i+= 1\n",
    "        for s in range(nS):\n",
    "            v, Q[s] = V[s], 0\n",
    "            for a in range(nA):\n",
    "                for sn in range(nS):\n",
    "                    for rn_, rn in enumerate(rewards): # get the reward rn and its index rn_\n",
    "                        Q[s,a] += p[sn,rn_,  s,a]*(rn + γ*V[sn])  # max operation is embedded now in the evaluation\n",
    "            V[s] = Q[s].max()                                    # step which made the algorithm more concise \n",
    "            Δ = max(Δ, abs(v-V[s]))\n",
    "            \n",
    "        if Δ<θ: print('loop stopped @ iteration: %d , Δ = %2.f'% (i, Δ)); break\n",
    "    return Q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "4688661d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:00<00:00, 4788.02it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loop stopped @ iteration: 6 , Δ =  0\n",
      "optimal action for state [0, 1, 1, 1, 1, 1, 0]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "env = randwalk()\n",
    "policy = π(value_iteration(env))\n",
    "print('optimal action for state', policy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5af1268c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x50 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='π', π=policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "730b962a",
   "metadata": {},
   "source": [
    "As we can see our value iteration algorithm is effective in finding the optimal policy. Note that for the random walk environment the best policy is to move right to get a reward."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78362bf8",
   "metadata": {},
   "source": [
    "### Value Iteration on a Grid World"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe4dba3",
   "metadata": {},
   "source": [
    "Now that you understand the value-iteration algorithm, you can apply it on a different and more complex envornment such as the grid world. As we did for the random walk, you have access to a grid world via the Grid class and its subroutines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "585210ad",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:00<00:00, 497.49it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loop stopped @ iteration: 10 , Δ =  0\n",
      "optimal action for state [1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "env=grid()\n",
    "policy = π(value_iteration(env))\n",
    "print('optimal action for state', policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8572e080",
   "metadata": {},
   "source": [
    "To interpret the policy we provided you with a useful funciton to rebder the environemt with its policy, we show that below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "bed3a519",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.render(underhood='π', π=policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b22a652",
   "metadata": {},
   "source": [
    "As we can see the policy-iteration algorithm successfuly gave us the best policy for this simple environment."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d551da9b",
   "metadata": {},
   "source": [
    "### Value Iteration on a Windy Grid World\n",
    "Below we show the results of applying the value iteration method on a windy grid world. This is almost identical to the previous simple grid world without any obstacles, the only difference is that there is a wind blowing upwards, which shifts the agent 2 or 1 cell depending on its location. See page 130 of the book."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8f4feb7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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TaLpmk3XXHTzWL58Od5991387Gc/Q25urt1xvqZrLp3ovPxQuubin3fs+vXrN1z3xRdfdLhNoumaTddcdHP453/+Z/zud7/DI488gtWrV9sd52u65tKNzssPpc3ltttuAxB8NSzU6lsi6JpN11zU+1VUVODnP/85/uEf/gGbN2/WZmonXXPpSOflh9LmMnXqVADAO++8c8N177zzDtLT03HnnXeqfMiw6ZpN11zUu1VWVqKyshILFy7E1q1bQ84RlUi65tKV1ssPlfs1X7p0yUxLS+tyn+sf/OAHKh+uV2TTNVcwOu3f3xmzha+ystIEYH7/+983W1tb7Y7zNV1zdabT+6nz8iO5oqKiQlWjSktLQ3p6OrZu3Yo333wTPp8Pf/zjH/HYY49hwIAB2LlzJwYMGKDq4XpFNl1z+f3+97/H7t278fbbb+Ott95Cc3MzWltb8fbbb+P48eO45557mK0HZfvtb3+LlStXYvjw4XjkkUfwwQcf4Pjx419famtrMWrUKObqRNf3U+vlRzw61o4dO8xJkyaZKSkpZlZWlvnd737XPHPmTDweKmK6ZtM11+zZs00AQS92f3tjtsgtWrSoy1wAzNmzZzNXELq+n346Lj845T4RESnHrWVERKQcmwsRESnH5kJERMqxuRARkXJsLkREpBybCxERKcfmQkREyrG5EBGRcmwuRESkHJsLEREpx+ZCRETKsbkQEZFy/x8fTQ1GoeZi4QAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env=windy()\n",
    "policy = π(value_iteration(env))\n",
    "print('optimal action for state', policy)\n",
    "env.render(underhood='π', π=policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d4220a",
   "metadata": {},
   "source": [
    "### value iteration on a maze\n",
    "Let us now apply the policy-iteration on the maze env."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "794028d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env=maze()\n",
    "policy = π(value_iteration(env))\n",
    "print('optimal action for state', policy)\n",
    "env.render(underhood='π', π=policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da4463cf",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "In this lesson, we covered the main dynamic programming algorithms. We saw how evaluating a policy was extremely useful in being the key component to allowing us to improve the policy. We then developed a policy iteration algorithm which improves the policy in two main steps:\n",
    "1. a step that evaluates the policy fully to reach an accurate estimation of the action values of the current policy\n",
    "2. a step that improves the policy by adopting a greedy action. The usage of an action-value function Q(s,a) was key in allowing us to choose between actions since the state-value function V(s) does not differentiate between the values of actions\n",
    "\n",
    "We finally saw how the value-iteration algorithm has a similar structure to the policy-iteration algorithm with one important difference; it can arrive at an optimal policy by just taking a step *towards* the optimal policy by slightly refines its estimation of the action-value function without fully evaluating it.  Hence, it improves its policy more concisely and with much less overhead than the full policy iteration method.\n",
    "\n",
    "In the next lesson, we will take a different approach and move to cover sampling methods that do not use the dynamics of the environment explicitly and instead try to improve its policy by interacting with the environment.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef3383f3",
   "metadata": {},
   "source": [
    "## Your turn\n",
    "Try the policy iteration on the maze8 which allows the agent to move diagonally, it is fun."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2bef3e",
   "metadata": {},
   "source": [
    "You should arrive to an optimal policy for this maze environment where agent can move diagonally and has 8 actions. You should be able to observe how efficient the policy is and how the agent is able to reach the goal location from anywhere in the environment.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4348c6aa",
   "metadata": {},
   "source": [
    "## Challenges\n",
    "1. Alter policy_iteration_stoch to use a softmax policy instead of the ε-greedy policy that we used in the policy_iteration_stoch method.\n",
    "2. You can challenge yourself also by trying to combine policy_iteration and policy_iteration_stoch() in one method. Use a flag such as ε_greedy to distinguish between deterministic and probabilistic policies."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8f31744-a30b-4cf8-8bde-ad14171ea5b4",
   "metadata": {},
   "source": [
    "[Back to TOC](IntroductionTOC.ipynb)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
